#lang racket
(require 2htdp/image)
(require 2htdp/universe)
(require test-engine/racket-tests)

(define ALTO 500)
(define ANCHO 1015)
(define M-ALTO 250)
(define ESCENA (empty-scene ANCHO ALTO))

; Función posicion-numero. Asigna a cada numero de 0 a 100 una posición
; posicion-numero Number -> Number
(define
  (posicion-numero num)
  (* num 10)
  )

; Función color-numero. Asigna un color a cada numero del 0 al 100
; color-numero Number -> String
(define
  (color-numero num)
  (if (= 0 (modulo num 2)) "blue" "red")
  )

; Función numero. Agrega un numero a la escena. La posicion y color del numero depende del mismo
; numero: Number String -> Escena
(define
  (numero num)
  (place-image (text (number->string num) 18 (color-numero num)) (posicion-numero num) M-ALTO ESCENA)
  )

; Funcion dibujar. Por ahora solo muestra la escena vacía
; dibujar: Estado -> Estado 
(define
  (dibujar estado)
  (numero estado)
  )

; Función avanzar. Avanza el estado de 0 a 100 aleatoriamente. Para hacer pruebas
; avanzar: Estado -> Estado
(define (avanzar estado) (random 101))

; Función terminar?. Determina si el estado es multiplo de 8 que debe terminar
; terminar?: Estado -> Bool
(define
  (terminar? estado)
  (if (= 0 (modulo estado 8)) #true #false)
  )

(check-expect (terminar? 10) #false)
(check-expect (terminar? 8) #true)
(check-expect (terminar? 50) #false)


#|(big-bang 50
  [on-draw dibujar]
  [on-tick avanzar 2]
  [stop-when terminar?]
  )|#